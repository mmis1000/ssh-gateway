#! /bin/bash

export CURRENT_USER="$USER" 

function get_unused_port {
    range=(`seq *LISTEN_PORT_LOW* *LISTEN_PORT_HIGH*`)
    ports=`netstat -anp tcp | grep LISTEN | grep '\d\+' | awk '{print $4}' | awk '{n=split($1,A,":"); print A[n]}' | uniq -u`
    unused_ports=(`echo ${range[@]} ${ports[@]} ${ports[@]} | tr ' ' '\n' | sort | uniq -u`)
    unused_ports_size=${#unused_ports[@]}
    index=$(($RANDOM % $unused_ports_size))
    echo ${unused_ports[$index]}
}

export TARGET_PORT="*TARGET_PORT*"
export TARGET_USER="*TARGET_USER*"
export TARGET_HOST="*TARGET_HOST*"

export CLIENT_PRIVATE_KEY="*CLIENT_PRIVATE_KEY*"
export CLIENT_SERVER_KEY="*CLIENT_SERVER_KEY*"

export LISTEN_PORT="$(get_unused_port)"

export WORKDIR="$HOME/.gateway-mmis1000/$TARGET_USER"
export CONTROL_SOCK="$WORKDIR/control.sock"

mkdir -p "$WORKDIR"

SFTP_BIN=`cat /etc/ssh/sshd_config | grep -oP '^Subsystem sftp \K.*'`
if [ ! "$SFTP_BIN" ]
then
    if [ -f '/usr/lib/openssh/sftp-server' ]
    then
        SFTP_BIN='/usr/lib/openssh/sftp-server'
    elif [ -f '/usr/lib/ssh/sftp-server' ]
    then
        SFTP_BIN='/usr/lib/ssh/sftp-server'
    else
        SFTP_BIN='internal-sftp'
    fi
fi

# templete
export SSHD_CONFIG_TEMPLETE="
Port $LISTEN_PORT
#AddressFamily any
ListenAddress 127.0.0.1
#ListenAddress ::

HostKey $WORKDIR/ssh_host_rsa_key
HostKey $WORKDIR/ssh_host_ecdsa_key
HostKey $WORKDIR/ssh_host_ed25519_key

AllowUsers $CURRENT_USER

PermitRootLogin no
AuthorizedKeysFile     $WORKDIR/authorized_keys
PasswordAuthentication no
ChallengeResponseAuthentication no
UsePAM no
PrintMotd no
AcceptEnv LANG LC_*
Subsystem	sftp	$SFTP_BIN
ClientAliveInterval 120
"

if [ ! "$(which ssh)" ]
then
    echo "Sorry, this script requires ssh in your environment, but I can't find it "
    exit -1
fi


if [ ! "$(which sshd)" ]
then
    echo "Sorry, this script requires sshd in your environment, but I can't find it "
    exit -1
fi

function finish_no_exit {
  rm -f /temp/control.sock >/dev/null 2>&1
  ssh -N -O exit    -i "$WORKDIR/id_rsa" -p $TARGET_PORT       -S "$CONTROL_SOCK" -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                             $TARGET_USER@$TARGET_HOST  >/dev/null 2>&1
}

function finish {
  kill 0
  rm -f /temp/control.sock >/dev/null 2>&1
  ssh -N -O exit    -i "$WORKDIR/id_rsa" -p $TARGET_PORT       -S "$CONTROL_SOCK" -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                             $TARGET_USER@$TARGET_HOST  >/dev/null 2>&1
  echo Exited!;
  exit;
}

finish_no_exit

trap "exit" INT TERM
trap finish EXIT


echo "===EULA=== 
Use of this software means you ALLOW us to setup a ssh daemon and establish connection tunnel on your computer.
If you do not agree about this, please enter ^C to exit right now!
=========="
read -p "press any key to continue..." -n 1
read -p "Forward which port as the http entry (0 to use static directory instead)?: " -i "8080" -e FORWARD_PORT

if [ "$FORWARD_PORT" != 0 ]
then
    STATIC_DIRECTORY="null"
else
    read -p "use which static directory?: " -i "$(pwd)" -e STATIC_DIRECTORY
fi

# setup keys
mkdir $WORKDIR > /dev/null 2> /dev/null
cd $WORKDIR

echo "$CLIENT_PRIVATE_KEY" > "$WORKDIR/id_rsa"
echo "$CLIENT_SERVER_KEY" > "$WORKDIR/authorized_keys"
echo "$SSHD_CONFIG_TEMPLETE" > "$WORKDIR/sshd_config"

chmod 600 id_rsa
chmod 600 authorized_keys

if [ -f "$WORKDIR/ssh_host_rsa_key" ]
then
    echo "Host key exists. skipping..."
else
    echo "Generating host keys..."
    ssh-keygen -N '' -t rsa -f "$WORKDIR/ssh_host_rsa_key"
    ssh-keygen -N '' -t ecdsa -f "$WORKDIR/ssh_host_ecdsa_key"
    ssh-keygen -N '' -t ed25519 -f "$WORKDIR/ssh_host_ed25519_key"
fi


$(which sshd) -D -f $WORKDIR/sshd_config -p $LISTEN_PORT >> "$WORKDIR/sshd.log" &
ssh -N            -i "$WORKDIR/id_rsa" -p $TARGET_PORT    -M -S "$CONTROL_SOCK" -o "ControlPersist yes" -o "ControlMaster auto" -o "ClearAllForwardings yes" -o "StrictHostKeyChecking no"                              $TARGET_USER@$TARGET_HOST& # spawn the master
sleep 5
echo 'preparing to register client...'
ssh               -i "$WORKDIR/id_rsa" -p $TARGET_PORT       -S "$CONTROL_SOCK" -o "ControlPersist yes" -o "ControlMaster auto" -o                              "StrictHostKeyChecking no"                              $TARGET_USER@$TARGET_HOST "register $CURRENT_USER $FORWARD_PORT $STATIC_DIRECTORY" # add forward 
sleep 1
echo 'starting to forward connection'
ssh -N -O forward -i "$WORKDIR/id_rsa" -p $TARGET_PORT       -S "$CONTROL_SOCK" -o "ControlPersist yes" -o "ControlMaster auto" -o                              "StrictHostKeyChecking no" -R 22:localhost:$LISTEN_PORT $TARGET_USER@$TARGET_HOST  # add forward 

# check ssh connectivity
while true
do
    echo 'starting to check alive'
    ssh -O check -N -p $TARGET_PORT   -S "$CONTROL_SOCK" -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no" $TARGET_USER@$TARGET_HOST
    LAST_STATUS=$?
    echo '---------------'
    echo $LAST_STATUS
    if [ $LAST_STATUS != 0 ]
    then
        echo 'connection dead... respawning'
        ssh -N -O exit    -i "$WORKDIR/id_rsa" -p $TARGET_PORT       -S "$CONTROL_SOCK" -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                             $TARGET_USER@$TARGET_HOST  # add forward 
        rm -f "$CONTROL_SOCK"
        
        ssh -N            -i "$WORKDIR/id_rsa" -p $TARGET_PORT    -M -S "$CONTROL_SOCK" -o "ControlPersist yes" -o "ControlMaster auto" -o "ClearAllForwardings yes" -o "StrictHostKeyChecking no"                              $TARGET_USER@$TARGET_HOST& # spawn the master
        sleep 5
        echo 'preparing to register client...'
        ssh               -i "$WORKDIR/id_rsa" -p $TARGET_PORT       -S "$CONTROL_SOCK" -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                              $TARGET_USER@$TARGET_HOST "register $CURRENT_USER $FORWARD_PORT $STATIC_DIRECTORY" # add forward 
        sleep 1
        echo 'starting to forward connection'
        ssh -N -O forward -i "$WORKDIR/id_rsa" -p $TARGET_PORT       -S "$CONTROL_SOCK" -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no" -R 22:localhost:$LISTEN_PORT $TARGET_USER@$TARGET_HOST  # add forward 
    fi
    
    sleep 10
done

echo "exit child"