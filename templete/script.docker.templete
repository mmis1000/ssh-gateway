#! /bin/bash

# command setting
export CURRENT_USER="$(id -u)" 
export ORIGINAL_USER="$(id -u $(ls -l `tty` | awk '{print $3}'))"
export ORIGINAL_USER_NAME="$(ls -l `tty` | awk '{print $3}')"

# unshare make `who` fails
if [ "$(ls -l `tty` | awk '{print $3}')" == "" ]
then
    export ORIGINAL_USER="$(id -u))"
    export ORIGINAL_USER_NAME="$(whoami)"
fi

export TARGET_PORT="*TARGET_PORT*"
export TARGET_USER="*TARGET_USER*"
export TARGET_HOST="*TARGET_HOST*"

export CLIENT_PRIVATE_KEY="*CLIENT_PRIVATE_KEY*"
export CLIENT_SERVER_KEY="*CLIENT_SERVER_KEY*"

export LISTEN_PORT="*LISTEN_PORT*"

export WORKDIR="$HOME/.gateway-mmis1000"

SFTP_BIN=`cat /etc/ssh/sshd_config | grep -oP '^Subsystem sftp \K.*'`
if [ ! "$SFTP_BIN" ]
then
    if [ -f '/usr/lib/openssh/sftp-server' ]
    then
        SFTP_BIN='/usr/lib/openssh/sftp-server'
    elif [ -f '/usr/lib/ssh/sftp-server' ]
    then
        SFTP_BIN='/usr/lib/ssh/sftp-server'
    else
        SFTP_BIN='internal-sftp'
    fi
fi

# templete
export SSHD_CONFIG_TEMPLETE="
Port *LISTEN_PORT*
#AddressFamily any
ListenAddress 127.0.0.1
#ListenAddress ::

HostKey $HOME/.gateway-mmis1000/ssh_host_rsa_key
HostKey $HOME/.gateway-mmis1000/ssh_host_ecdsa_key
HostKey $HOME/.gateway-mmis1000/ssh_host_ed25519_key

AllowUsers $ORIGINAL_USER_NAME

PermitRootLogin yes
AuthorizedKeysFile     $HOME/.gateway-mmis1000/authorized_keys
PasswordAuthentication no
ChallengeResponseAuthentication no
UsePAM no
PrintMotd no
AcceptEnv LANG LC_*
Subsystem	sftp	$SFTP_BIN
ClientAliveInterval 120
"

if [ ! "$(which ssh)" ]
then
    echo "Sorry, this script requires ssh in your environment, but I can't find it "
    exit -1
fi


if [ ! "$(which sshd)" ]
then
    echo "Sorry, this script requires sshd in your environment, but I can't find it "
    exit -1
fi

function finish_no_exit {
  rm -f /temp/control.sock >/dev/null 2>&1
  ssh -N -O exit    -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                             *TARGET_USER*@*TARGET_HOST*  >/dev/null 2>&1
}

function finish {
  rm -f /temp/control.sock >/dev/null 2>&1
  ssh -N -O exit    -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                             *TARGET_USER*@*TARGET_HOST*  >/dev/null 2>&1
  echo Exited!;
  exit;
}

trap finish_no_exit EXIT
trap finish SIGINT SIGTERM

finish_no_exit

read -p "Forward which port as the http entry (0 to use static directory instead)?: " -i "8080" -e FORWARD_PORT

read -p "use which static directory?: " -i "$(pwd)" -e STATIC_DIRECTORY

# setup keys
mkdir $HOME/.gateway-mmis1000 > /dev/null 2> /dev/null
cd $HOME/.gateway-mmis1000

echo "$CLIENT_PRIVATE_KEY" > "$HOME/.gateway-mmis1000/id_rsa"
echo "$CLIENT_SERVER_KEY" > "$HOME/.gateway-mmis1000/authorized_keys"
echo "$SSHD_CONFIG_TEMPLETE" > "$HOME/.gateway-mmis1000/sshd_config"

chmod 600 id_rsa
chmod 600 authorized_keys

if [ -f "$HOME/.gateway-mmis1000/ssh_host_rsa_key" ]
then
    echo "Host key exists. skipping..."
else
    echo "Generating host keys..."
    ssh-keygen -N '' -t rsa -f "$HOME/.gateway-mmis1000/ssh_host_rsa_key"
    ssh-keygen -N '' -t ecdsa -f "$HOME/.gateway-mmis1000/ssh_host_ecdsa_key"
    ssh-keygen -N '' -t ed25519 -f "$HOME/.gateway-mmis1000/ssh_host_ed25519_key"
fi


$(which sshd) -D -f $HOME/.gateway-mmis1000/sshd_config -p *LISTEN_PORT* >> "$HOME/.gateway-mmis1000/sshd.log" &
ssh -N            -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*    -M -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto" -o "ClearAllForwardings yes" -o "StrictHostKeyChecking no"                              *TARGET_USER*@*TARGET_HOST*& # spawn the master
sleep 5
echo 'preparing to register client...'
ssh               -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto" -o                              "StrictHostKeyChecking no"                              *TARGET_USER*@*TARGET_HOST* "register $ORIGINAL_USER_NAME $FORWARD_PORT $STATIC_DIRECTORY" # add forward 
sleep 1
echo 'starting to forward connection'
ssh -N -O forward -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto" -o                              "StrictHostKeyChecking no" -R 22:localhost:*LISTEN_PORT* *TARGET_USER*@*TARGET_HOST*  # add forward 

# check ssh connectivity
while true
do
    echo 'starting to check alive'
    ssh -O check -N -p *TARGET_PORT*   -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no" *TARGET_USER*@*TARGET_HOST*
    LAST_STATUS=$?
    echo '---------------'
    echo $LAST_STATUS
    if [ $LAST_STATUS != 0 ]
    then
        echo 'connection dead... respawning'
        ssh -N -O exit    -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                             *TARGET_USER*@*TARGET_HOST*  # add forward 
        rm -f /tmp/control.sock
        
        ssh -N            -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*    -M -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto" -o "ClearAllForwardings yes" -o "StrictHostKeyChecking no"                              *TARGET_USER*@*TARGET_HOST*& # spawn the master
        sleep 5
        echo 'preparing to register client...'
        ssh               -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no"                              *TARGET_USER*@*TARGET_HOST* "register $ORIGINAL_USER_NAME $FORWARD_PORT $STATIC_DIRECTORY" # add forward 
        sleep 1
        echo 'starting to forward connection'
        ssh -N -O forward -i "$HOME/.gateway-mmis1000/id_rsa" -p *TARGET_PORT*       -S /tmp/control.sock -o "ControlPersist yes" -o "ControlMaster auto"                              -o "StrictHostKeyChecking no" -R 22:localhost:*LISTEN_PORT* *TARGET_USER*@*TARGET_HOST*  # add forward 
    fi
    
    sleep 10
done

echo "exit child"